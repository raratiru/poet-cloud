---
- name: Verify that project exists by checking the cellar directory
  stat:
    path: "{{ lookup('env', 'POET_PROJECT_PATH') }}/cellar"
  register: register_project_exists

- name: "Push upstream if project does not exist"
  local_action: shell cd {{ lookup('env', "ANSIBLE_LOCAL_PROJECT_PATH" )}} && git push upstream
  when: not register_project_exists.stat.exists

- name: "Start Maintenance Mode after waiting for the countdown notification to finish"
  shell:
    cmd: "{{ ansible_user_dir }}/.local/bin/start_maintenance"

- name: "Stop Gunicorn"
  become: True
  ansible.builtin.service:
    name: gunicorn
    state: stopped

- name: Copy poet files
  become: True
  unarchive:
    src: "{{ lookup('env', 'HOME') }}/.local/bin/poet.tar.gz"
    dest: "{{ ansible_user_dir }}/.local/bin/"
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
    mode: 0700

- name: "Copy .env to production"
  copy:
    src: "{{ lookup('env', 'ANSIBLE_DOTENV_FILE_PATH') }}"
    dest: "{{ lookup('env', 'POET_PROJECT_PATH') }}/.env"
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
    mode: 0400

- name: "Push upstream"
  local_action: shell cd {{ lookup('env', "ANSIBLE_LOCAL_PROJECT_PATH" )}} && git push upstream

- name: "Conclude Maintenance Mode"
  shell:
    cmd: /usr/bin/screen -S maintenance -d -m "{{ ansible_user_dir }}/.local/bin/conclude_maintenance"

- name: Attention
  debug:
    msg: "Login to the server and run `screen -r maintenance` to see how the script goes."

- name: Make poet_server to Wait until screen is over
  become: True
  wait_for:
    path: /tmp/ansible_maintenance_wait
    timeout: 800
    state: absent

- name: "Stop Maintenance Mode"
  shell:
    cmd: "{{ ansible_user_dir }}/.local/bin/stop_maintenance"

- name: "Start and Enable Gunicorn"
  become: True
  ansible.builtin.service:
    name: gunicorn
    state: started
    enabled: True